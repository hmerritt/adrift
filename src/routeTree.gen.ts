/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './view/routes/__root'
import { Route as IndexRouteImport } from './view/routes/index'

const UserLazyRouteImport = createFileRoute('/user')()
const UserUserIdLazyRouteImport = createFileRoute('/user/$userId')()
const TestsStyleLazyRouteImport = createFileRoute('/tests/style')()

const UserLazyRoute = UserLazyRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./view/routes/user.lazy').then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserUserIdLazyRoute = UserUserIdLazyRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UserLazyRoute,
} as any).lazy(() =>
  import('./view/routes/user.$userId.lazy').then((d) => d.Route),
)
const TestsStyleLazyRoute = TestsStyleLazyRouteImport.update({
  id: '/tests/style',
  path: '/tests/style',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./view/routes/tests/style.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/user': typeof UserLazyRouteWithChildren
  '/tests/style': typeof TestsStyleLazyRoute
  '/user/$userId': typeof UserUserIdLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/user': typeof UserLazyRouteWithChildren
  '/tests/style': typeof TestsStyleLazyRoute
  '/user/$userId': typeof UserUserIdLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/user': typeof UserLazyRouteWithChildren
  '/tests/style': typeof TestsStyleLazyRoute
  '/user/$userId': typeof UserUserIdLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/user' | '/tests/style' | '/user/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/user' | '/tests/style' | '/user/$userId'
  id: '__root__' | '/' | '/user' | '/tests/style' | '/user/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserLazyRoute: typeof UserLazyRouteWithChildren
  TestsStyleLazyRoute: typeof TestsStyleLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdLazyRouteImport
      parentRoute: typeof UserLazyRoute
    }
    '/tests/style': {
      id: '/tests/style'
      path: '/tests/style'
      fullPath: '/tests/style'
      preLoaderRoute: typeof TestsStyleLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface UserLazyRouteChildren {
  UserUserIdLazyRoute: typeof UserUserIdLazyRoute
}

const UserLazyRouteChildren: UserLazyRouteChildren = {
  UserUserIdLazyRoute: UserUserIdLazyRoute,
}

const UserLazyRouteWithChildren = UserLazyRoute._addFileChildren(
  UserLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserLazyRoute: UserLazyRouteWithChildren,
  TestsStyleLazyRoute: TestsStyleLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
