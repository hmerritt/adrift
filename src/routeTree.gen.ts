/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './view/routes/__root'
import { Route as IndexImport } from './view/routes/index'

// Create Virtual Routes

const UserLazyImport = createFileRoute('/user')()
const UserUserIdLazyImport = createFileRoute('/user/$userId')()
const TestsStyleLazyImport = createFileRoute('/tests/style')()

// Create/Update Routes

const UserLazyRoute = UserLazyImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./view/routes/user.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserIdLazyRoute = UserUserIdLazyImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UserLazyRoute,
} as any).lazy(() =>
  import('./view/routes/user.$userId.lazy').then((d) => d.Route),
)

const TestsStyleLazyRoute = TestsStyleLazyImport.update({
  id: '/tests/style',
  path: '/tests/style',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./view/routes/tests/style.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserLazyImport
      parentRoute: typeof rootRoute
    }
    '/tests/style': {
      id: '/tests/style'
      path: '/tests/style'
      fullPath: '/tests/style'
      preLoaderRoute: typeof TestsStyleLazyImport
      parentRoute: typeof rootRoute
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdLazyImport
      parentRoute: typeof UserLazyImport
    }
  }
}

// Create and export the route tree

interface UserLazyRouteChildren {
  UserUserIdLazyRoute: typeof UserUserIdLazyRoute
}

const UserLazyRouteChildren: UserLazyRouteChildren = {
  UserUserIdLazyRoute: UserUserIdLazyRoute,
}

const UserLazyRouteWithChildren = UserLazyRoute._addFileChildren(
  UserLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/user': typeof UserLazyRouteWithChildren
  '/tests/style': typeof TestsStyleLazyRoute
  '/user/$userId': typeof UserUserIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/user': typeof UserLazyRouteWithChildren
  '/tests/style': typeof TestsStyleLazyRoute
  '/user/$userId': typeof UserUserIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/user': typeof UserLazyRouteWithChildren
  '/tests/style': typeof TestsStyleLazyRoute
  '/user/$userId': typeof UserUserIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/user' | '/tests/style' | '/user/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/user' | '/tests/style' | '/user/$userId'
  id: '__root__' | '/' | '/user' | '/tests/style' | '/user/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserLazyRoute: typeof UserLazyRouteWithChildren
  TestsStyleLazyRoute: typeof TestsStyleLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserLazyRoute: UserLazyRouteWithChildren,
  TestsStyleLazyRoute: TestsStyleLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/user",
        "/tests/style"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/user": {
      "filePath": "user.lazy.tsx",
      "children": [
        "/user/$userId"
      ]
    },
    "/tests/style": {
      "filePath": "tests/style.lazy.tsx"
    },
    "/user/$userId": {
      "filePath": "user.$userId.lazy.tsx",
      "parent": "/user"
    }
  }
}
ROUTE_MANIFEST_END */
